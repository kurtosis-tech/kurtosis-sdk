// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: engine_service.proto

package kurtosis_engine_rpc_api_bindings

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ==============================================================================================
//                                            Get Enclaves
// ==============================================================================================
// Status of the containers in the enclave
// NOTE: We have to prefix the enum values with the enum name due to the way Protobuf enum valuee uniqueness works
type EnclaveContainersStatus int32

const (
	// The enclave has been created, but there are no containers inside it
	EnclaveContainersStatus_EnclaveContainersStatus_EMPTY EnclaveContainersStatus = 0
	// One or more containers are running in the enclave (which may or may not include the API container, depending on if the user was manually stopping/removing containers)
	EnclaveContainersStatus_EnclaveContainersStatus_RUNNING EnclaveContainersStatus = 1
	// There are >= 1 container in the enclave, but they're all stopped
	EnclaveContainersStatus_EnclaveContainersStatus_STOPPED EnclaveContainersStatus = 2
)

// Enum value maps for EnclaveContainersStatus.
var (
	EnclaveContainersStatus_name = map[int32]string{
		0: "EnclaveContainersStatus_EMPTY",
		1: "EnclaveContainersStatus_RUNNING",
		2: "EnclaveContainersStatus_STOPPED",
	}
	EnclaveContainersStatus_value = map[string]int32{
		"EnclaveContainersStatus_EMPTY":   0,
		"EnclaveContainersStatus_RUNNING": 1,
		"EnclaveContainersStatus_STOPPED": 2,
	}
)

func (x EnclaveContainersStatus) Enum() *EnclaveContainersStatus {
	p := new(EnclaveContainersStatus)
	*p = x
	return p
}

func (x EnclaveContainersStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnclaveContainersStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_service_proto_enumTypes[0].Descriptor()
}

func (EnclaveContainersStatus) Type() protoreflect.EnumType {
	return &file_engine_service_proto_enumTypes[0]
}

func (x EnclaveContainersStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnclaveContainersStatus.Descriptor instead.
func (EnclaveContainersStatus) EnumDescriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{0}
}

// NOTE: We have to prefix the enum values with the enum name due to the way Protobuf enum value uniqueness works
type EnclaveAPIContainerStatus int32

const (
	// No API container exists in the enclave
	// This is the only valid value when the enclave containers status is "EMPTY"
	EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_NONEXISTENT EnclaveAPIContainerStatus = 0
	// An API container exists and is running
	// NOTE: this does NOT say that the server inside the API container is available, because checking if it's available requires making a call to the API container
	//  If we have a lot of API containers, we'd be making tons of calls
	EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_RUNNING EnclaveAPIContainerStatus = 1
	// An API container exists, but isn't running
	EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_STOPPED EnclaveAPIContainerStatus = 2
)

// Enum value maps for EnclaveAPIContainerStatus.
var (
	EnclaveAPIContainerStatus_name = map[int32]string{
		0: "EnclaveAPIContainerStatus_NONEXISTENT",
		1: "EnclaveAPIContainerStatus_RUNNING",
		2: "EnclaveAPIContainerStatus_STOPPED",
	}
	EnclaveAPIContainerStatus_value = map[string]int32{
		"EnclaveAPIContainerStatus_NONEXISTENT": 0,
		"EnclaveAPIContainerStatus_RUNNING":     1,
		"EnclaveAPIContainerStatus_STOPPED":     2,
	}
)

func (x EnclaveAPIContainerStatus) Enum() *EnclaveAPIContainerStatus {
	p := new(EnclaveAPIContainerStatus)
	*p = x
	return p
}

func (x EnclaveAPIContainerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnclaveAPIContainerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_service_proto_enumTypes[1].Descriptor()
}

func (EnclaveAPIContainerStatus) Type() protoreflect.EnumType {
	return &file_engine_service_proto_enumTypes[1]
}

func (x EnclaveAPIContainerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnclaveAPIContainerStatus.Descriptor instead.
func (EnclaveAPIContainerStatus) EnumDescriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{1}
}

// ==============================================================================================
//                                        Get Engine Info
// ==============================================================================================
type GetEngineInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the engine server
	EngineVersion string `protobuf:"bytes,1,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
}

func (x *GetEngineInfoResponse) Reset() {
	*x = GetEngineInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEngineInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEngineInfoResponse) ProtoMessage() {}

func (x *GetEngineInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEngineInfoResponse.ProtoReflect.Descriptor instead.
func (*GetEngineInfoResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetEngineInfoResponse) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

// ==============================================================================================
//                                        Create Enclave
// ==============================================================================================
type CreateEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the new Kurtosis Enclave
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
	// The image tag of the API container that should be used inside the enclave
	// If blank, will use the default version that the engine server uses
	ApiContainerVersionTag string `protobuf:"bytes,2,opt,name=api_container_version_tag,json=apiContainerVersionTag,proto3" json:"api_container_version_tag,omitempty"`
	// The API container log level
	ApiContainerLogLevel string `protobuf:"bytes,3,opt,name=api_container_log_level,json=apiContainerLogLevel,proto3" json:"api_container_log_level,omitempty"`
	// Whether network partitioning will be enabled or not on the new Kurtosis Enclave
	IsPartitioningEnabled bool `protobuf:"varint,4,opt,name=is_partitioning_enabled,json=isPartitioningEnabled,proto3" json:"is_partitioning_enabled,omitempty"`
}

func (x *CreateEnclaveArgs) Reset() {
	*x = CreateEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnclaveArgs) ProtoMessage() {}

func (x *CreateEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnclaveArgs.ProtoReflect.Descriptor instead.
func (*CreateEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEnclaveArgs) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

func (x *CreateEnclaveArgs) GetApiContainerVersionTag() string {
	if x != nil {
		return x.ApiContainerVersionTag
	}
	return ""
}

func (x *CreateEnclaveArgs) GetApiContainerLogLevel() string {
	if x != nil {
		return x.ApiContainerLogLevel
	}
	return ""
}

func (x *CreateEnclaveArgs) GetIsPartitioningEnabled() bool {
	if x != nil {
		return x.IsPartitioningEnabled
	}
	return false
}

type CreateEnclaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//All the enclave information inside this object
	EnclaveInfo *EnclaveInfo `protobuf:"bytes,1,opt,name=enclave_info,json=enclaveInfo,proto3" json:"enclave_info,omitempty"`
}

func (x *CreateEnclaveResponse) Reset() {
	*x = CreateEnclaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnclaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnclaveResponse) ProtoMessage() {}

func (x *CreateEnclaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnclaveResponse.ProtoReflect.Descriptor instead.
func (*CreateEnclaveResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEnclaveResponse) GetEnclaveInfo() *EnclaveInfo {
	if x != nil {
		return x.EnclaveInfo
	}
	return nil
}

type EnclaveAPIContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The container engine ID of the API container
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// The IP inside the enclave network of the API container (i.e. how services inside the network can reach the API container)
	IpInsideEnclave string `protobuf:"bytes,2,opt,name=ip_inside_enclave,json=ipInsideEnclave,proto3" json:"ip_inside_enclave,omitempty"`
	// The grpc port inside the enclave network that the API container is listening on
	GrpcPortInsideEnclave uint32 `protobuf:"varint,3,opt,name=grpc_port_inside_enclave,json=grpcPortInsideEnclave,proto3" json:"grpc_port_inside_enclave,omitempty"`
	// The grpc-proxy port inside the enclave network that the API container is listening on
	GrpcProxyPortInsideEnclave uint32 `protobuf:"varint,4,opt,name=grpc_proxy_port_inside_enclave,json=grpcProxyPortInsideEnclave,proto3" json:"grpc_proxy_port_inside_enclave,omitempty"`
}

func (x *EnclaveAPIContainerInfo) Reset() {
	*x = EnclaveAPIContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveAPIContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveAPIContainerInfo) ProtoMessage() {}

func (x *EnclaveAPIContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveAPIContainerInfo.ProtoReflect.Descriptor instead.
func (*EnclaveAPIContainerInfo) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{3}
}

func (x *EnclaveAPIContainerInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *EnclaveAPIContainerInfo) GetIpInsideEnclave() string {
	if x != nil {
		return x.IpInsideEnclave
	}
	return ""
}

func (x *EnclaveAPIContainerInfo) GetGrpcPortInsideEnclave() uint32 {
	if x != nil {
		return x.GrpcPortInsideEnclave
	}
	return 0
}

func (x *EnclaveAPIContainerInfo) GetGrpcProxyPortInsideEnclave() uint32 {
	if x != nil {
		return x.GrpcProxyPortInsideEnclave
	}
	return 0
}

// Will only be present if the API container is running
type EnclaveAPIContainerHostMachineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interface IP on the container engine host machine where the API container can be reached
	IpOnHostMachine string `protobuf:"bytes,4,opt,name=ip_on_host_machine,json=ipOnHostMachine,proto3" json:"ip_on_host_machine,omitempty"`
	// The grpc port on the container engine host machine where the API container can be reached
	GrpcPortOnHostMachine uint32 `protobuf:"varint,5,opt,name=grpc_port_on_host_machine,json=grpcPortOnHostMachine,proto3" json:"grpc_port_on_host_machine,omitempty"`
	// The port that proxies the engine's grpc port, which is necessary for the engine to be accessible by Typescript-in-web using the grpc-web library
	GrpcProxyPortOnHostMachine uint32 `protobuf:"varint,6,opt,name=grpc_proxy_port_on_host_machine,json=grpcProxyPortOnHostMachine,proto3" json:"grpc_proxy_port_on_host_machine,omitempty"`
}

func (x *EnclaveAPIContainerHostMachineInfo) Reset() {
	*x = EnclaveAPIContainerHostMachineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveAPIContainerHostMachineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveAPIContainerHostMachineInfo) ProtoMessage() {}

func (x *EnclaveAPIContainerHostMachineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveAPIContainerHostMachineInfo.ProtoReflect.Descriptor instead.
func (*EnclaveAPIContainerHostMachineInfo) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{4}
}

func (x *EnclaveAPIContainerHostMachineInfo) GetIpOnHostMachine() string {
	if x != nil {
		return x.IpOnHostMachine
	}
	return ""
}

func (x *EnclaveAPIContainerHostMachineInfo) GetGrpcPortOnHostMachine() uint32 {
	if x != nil {
		return x.GrpcPortOnHostMachine
	}
	return 0
}

func (x *EnclaveAPIContainerHostMachineInfo) GetGrpcProxyPortOnHostMachine() uint32 {
	if x != nil {
		return x.GrpcProxyPortOnHostMachine
	}
	return 0
}

// Enclaves are defined by a network in the container system, which is why there's a bunch of network information here
type EnclaveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the enclave
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
	// State of all containers in the enclave
	ContainersStatus EnclaveContainersStatus `protobuf:"varint,2,opt,name=containers_status,json=containersStatus,proto3,enum=engine_api.EnclaveContainersStatus" json:"containers_status,omitempty"`
	// State specifically of the API container
	ApiContainerStatus EnclaveAPIContainerStatus `protobuf:"varint,3,opt,name=api_container_status,json=apiContainerStatus,proto3,enum=engine_api.EnclaveAPIContainerStatus" json:"api_container_status,omitempty"`
	// NOTE: Will not be present if the API container status is "NONEXISTENT"!!
	ApiContainerInfo *EnclaveAPIContainerInfo `protobuf:"bytes,4,opt,name=api_container_info,json=apiContainerInfo,proto3" json:"api_container_info,omitempty"`
	// NOTE: Will not be present if the API container status is not "RUNNING"!!
	ApiContainerHostMachineInfo *EnclaveAPIContainerHostMachineInfo `protobuf:"bytes,5,opt,name=api_container_host_machine_info,json=apiContainerHostMachineInfo,proto3" json:"api_container_host_machine_info,omitempty"`
}

func (x *EnclaveInfo) Reset() {
	*x = EnclaveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnclaveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnclaveInfo) ProtoMessage() {}

func (x *EnclaveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnclaveInfo.ProtoReflect.Descriptor instead.
func (*EnclaveInfo) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{5}
}

func (x *EnclaveInfo) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

func (x *EnclaveInfo) GetContainersStatus() EnclaveContainersStatus {
	if x != nil {
		return x.ContainersStatus
	}
	return EnclaveContainersStatus_EnclaveContainersStatus_EMPTY
}

func (x *EnclaveInfo) GetApiContainerStatus() EnclaveAPIContainerStatus {
	if x != nil {
		return x.ApiContainerStatus
	}
	return EnclaveAPIContainerStatus_EnclaveAPIContainerStatus_NONEXISTENT
}

func (x *EnclaveInfo) GetApiContainerInfo() *EnclaveAPIContainerInfo {
	if x != nil {
		return x.ApiContainerInfo
	}
	return nil
}

func (x *EnclaveInfo) GetApiContainerHostMachineInfo() *EnclaveAPIContainerHostMachineInfo {
	if x != nil {
		return x.ApiContainerHostMachineInfo
	}
	return nil
}

type GetEnclavesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping of enclave_id -> info_about_enclave
	EnclaveInfo map[string]*EnclaveInfo `protobuf:"bytes,1,rep,name=enclave_info,json=enclaveInfo,proto3" json:"enclave_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetEnclavesResponse) Reset() {
	*x = GetEnclavesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnclavesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnclavesResponse) ProtoMessage() {}

func (x *GetEnclavesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnclavesResponse.ProtoReflect.Descriptor instead.
func (*GetEnclavesResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetEnclavesResponse) GetEnclaveInfo() map[string]*EnclaveInfo {
	if x != nil {
		return x.EnclaveInfo
	}
	return nil
}

// ==============================================================================================
//                                       Stop Enclave
// ==============================================================================================
type StopEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The ID of the Kurtosis enclave to stop
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
}

func (x *StopEnclaveArgs) Reset() {
	*x = StopEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEnclaveArgs) ProtoMessage() {}

func (x *StopEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEnclaveArgs.ProtoReflect.Descriptor instead.
func (*StopEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{7}
}

func (x *StopEnclaveArgs) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

// ==============================================================================================
//                                       Destroy Enclave
// ==============================================================================================
type DestroyEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The ID of the Kurtosis enclave to destroy
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
}

func (x *DestroyEnclaveArgs) Reset() {
	*x = DestroyEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyEnclaveArgs) ProtoMessage() {}

func (x *DestroyEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyEnclaveArgs.ProtoReflect.Descriptor instead.
func (*DestroyEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{8}
}

func (x *DestroyEnclaveArgs) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

// ==============================================================================================
//                                       Create Enclave
// ==============================================================================================
type CleanArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, It will clean even the running enclaves
	ShouldCleanAll bool `protobuf:"varint,1,opt,name=should_clean_all,json=shouldCleanAll,proto3" json:"should_clean_all,omitempty"`
}

func (x *CleanArgs) Reset() {
	*x = CleanArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanArgs) ProtoMessage() {}

func (x *CleanArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanArgs.ProtoReflect.Descriptor instead.
func (*CleanArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{9}
}

func (x *CleanArgs) GetShouldCleanAll() bool {
	if x != nil {
		return x.ShouldCleanAll
	}
	return false
}

type CleanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of removed enclave IDs
	RemovedEnclaveIds map[string]bool `protobuf:"bytes,1,rep,name=removed_enclave_ids,json=removedEnclaveIds,proto3" json:"removed_enclave_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CleanResponse) Reset() {
	*x = CleanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanResponse) ProtoMessage() {}

func (x *CleanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanResponse.ProtoReflect.Descriptor instead.
func (*CleanResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{10}
}

func (x *CleanResponse) GetRemovedEnclaveIds() map[string]bool {
	if x != nil {
		return x.RemovedEnclaveIds
	}
	return nil
}

// ==============================================================================================
//                                   Get User Service Logs
// ==============================================================================================
type GetUserServiceLogsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the user service's Kurtosis Enclave
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
	// "Set" of service GUIDs in the enclave
	ServiceGuidSet map[string]bool `protobuf:"bytes,2,rep,name=service_guid_set,json=serviceGuidSet,proto3" json:"service_guid_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUserServiceLogsArgs) Reset() {
	*x = GetUserServiceLogsArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserServiceLogsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserServiceLogsArgs) ProtoMessage() {}

func (x *GetUserServiceLogsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserServiceLogsArgs.ProtoReflect.Descriptor instead.
func (*GetUserServiceLogsArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserServiceLogsArgs) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

func (x *GetUserServiceLogsArgs) GetServiceGuidSet() map[string]bool {
	if x != nil {
		return x.ServiceGuidSet
	}
	return nil
}

type GetUserServiceLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user service log lines grouped by user service GUIDs and ordered in forward direction (oldest log line is the first element)
	UserServiceLogsByUserServiceGuid map[string]*LogLine `protobuf:"bytes,1,rep,name=user_service_logs_by_user_service_guid,json=userServiceLogsByUserServiceGuid,proto3" json:"user_service_logs_by_user_service_guid,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserServiceLogsResponse) Reset() {
	*x = GetUserServiceLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserServiceLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserServiceLogsResponse) ProtoMessage() {}

func (x *GetUserServiceLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserServiceLogsResponse.ProtoReflect.Descriptor instead.
func (*GetUserServiceLogsResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserServiceLogsResponse) GetUserServiceLogsByUserServiceGuid() map[string]*LogLine {
	if x != nil {
		return x.UserServiceLogsByUserServiceGuid
	}
	return nil
}

type LogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line []string `protobuf:"bytes,1,rep,name=line,proto3" json:"line,omitempty"`
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{13}
}

func (x *LogLine) GetLine() []string {
	if x != nil {
		return x.Line
	}
	return nil
}

var File_engine_service_proto protoreflect.FileDescriptor

var file_engine_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xdc, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12,
	0x35, 0x0a, 0x17, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x53,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41,
	0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x70, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x67, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x22,
	0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x70, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x38, 0x0a, 0x19, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x48, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x67, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0xa0,
	0x03, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x57, 0x0a, 0x14, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x70, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x74, 0x0a, 0x1f, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1b, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x57,
	0x0a, 0x10, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x45,
	0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x22, 0x35,
	0x0a, 0x09, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45,
	0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xdc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7,
	0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01,
	0x0a, 0x26, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x1a, 0x68,
	0x0a, 0x25, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75,
	0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x2a, 0x86, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x94, 0x01, 0x0a, 0x19, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x25, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x50, 0x49, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x32, 0xaf, 0x04, 0x0a, 0x0d, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x21, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1b, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x12, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x26, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73,
	0x2d, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_engine_service_proto_rawDescOnce sync.Once
	file_engine_service_proto_rawDescData = file_engine_service_proto_rawDesc
)

func file_engine_service_proto_rawDescGZIP() []byte {
	file_engine_service_proto_rawDescOnce.Do(func() {
		file_engine_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_engine_service_proto_rawDescData)
	})
	return file_engine_service_proto_rawDescData
}

var file_engine_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_engine_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_engine_service_proto_goTypes = []interface{}{
	(EnclaveContainersStatus)(0),               // 0: engine_api.EnclaveContainersStatus
	(EnclaveAPIContainerStatus)(0),             // 1: engine_api.EnclaveAPIContainerStatus
	(*GetEngineInfoResponse)(nil),              // 2: engine_api.GetEngineInfoResponse
	(*CreateEnclaveArgs)(nil),                  // 3: engine_api.CreateEnclaveArgs
	(*CreateEnclaveResponse)(nil),              // 4: engine_api.CreateEnclaveResponse
	(*EnclaveAPIContainerInfo)(nil),            // 5: engine_api.EnclaveAPIContainerInfo
	(*EnclaveAPIContainerHostMachineInfo)(nil), // 6: engine_api.EnclaveAPIContainerHostMachineInfo
	(*EnclaveInfo)(nil),                        // 7: engine_api.EnclaveInfo
	(*GetEnclavesResponse)(nil),                // 8: engine_api.GetEnclavesResponse
	(*StopEnclaveArgs)(nil),                    // 9: engine_api.StopEnclaveArgs
	(*DestroyEnclaveArgs)(nil),                 // 10: engine_api.DestroyEnclaveArgs
	(*CleanArgs)(nil),                          // 11: engine_api.CleanArgs
	(*CleanResponse)(nil),                      // 12: engine_api.CleanResponse
	(*GetUserServiceLogsArgs)(nil),             // 13: engine_api.GetUserServiceLogsArgs
	(*GetUserServiceLogsResponse)(nil),         // 14: engine_api.GetUserServiceLogsResponse
	(*LogLine)(nil),                            // 15: engine_api.LogLine
	nil,                                        // 16: engine_api.GetEnclavesResponse.EnclaveInfoEntry
	nil,                                        // 17: engine_api.CleanResponse.RemovedEnclaveIdsEntry
	nil,                                        // 18: engine_api.GetUserServiceLogsArgs.ServiceGuidSetEntry
	nil,                                        // 19: engine_api.GetUserServiceLogsResponse.UserServiceLogsByUserServiceGuidEntry
	(*emptypb.Empty)(nil),                      // 20: google.protobuf.Empty
}
var file_engine_service_proto_depIdxs = []int32{
	7,  // 0: engine_api.CreateEnclaveResponse.enclave_info:type_name -> engine_api.EnclaveInfo
	0,  // 1: engine_api.EnclaveInfo.containers_status:type_name -> engine_api.EnclaveContainersStatus
	1,  // 2: engine_api.EnclaveInfo.api_container_status:type_name -> engine_api.EnclaveAPIContainerStatus
	5,  // 3: engine_api.EnclaveInfo.api_container_info:type_name -> engine_api.EnclaveAPIContainerInfo
	6,  // 4: engine_api.EnclaveInfo.api_container_host_machine_info:type_name -> engine_api.EnclaveAPIContainerHostMachineInfo
	16, // 5: engine_api.GetEnclavesResponse.enclave_info:type_name -> engine_api.GetEnclavesResponse.EnclaveInfoEntry
	17, // 6: engine_api.CleanResponse.removed_enclave_ids:type_name -> engine_api.CleanResponse.RemovedEnclaveIdsEntry
	18, // 7: engine_api.GetUserServiceLogsArgs.service_guid_set:type_name -> engine_api.GetUserServiceLogsArgs.ServiceGuidSetEntry
	19, // 8: engine_api.GetUserServiceLogsResponse.user_service_logs_by_user_service_guid:type_name -> engine_api.GetUserServiceLogsResponse.UserServiceLogsByUserServiceGuidEntry
	7,  // 9: engine_api.GetEnclavesResponse.EnclaveInfoEntry.value:type_name -> engine_api.EnclaveInfo
	15, // 10: engine_api.GetUserServiceLogsResponse.UserServiceLogsByUserServiceGuidEntry.value:type_name -> engine_api.LogLine
	20, // 11: engine_api.EngineService.GetEngineInfo:input_type -> google.protobuf.Empty
	3,  // 12: engine_api.EngineService.CreateEnclave:input_type -> engine_api.CreateEnclaveArgs
	20, // 13: engine_api.EngineService.GetEnclaves:input_type -> google.protobuf.Empty
	9,  // 14: engine_api.EngineService.StopEnclave:input_type -> engine_api.StopEnclaveArgs
	10, // 15: engine_api.EngineService.DestroyEnclave:input_type -> engine_api.DestroyEnclaveArgs
	11, // 16: engine_api.EngineService.Clean:input_type -> engine_api.CleanArgs
	13, // 17: engine_api.EngineService.GetUserServiceLogs:input_type -> engine_api.GetUserServiceLogsArgs
	2,  // 18: engine_api.EngineService.GetEngineInfo:output_type -> engine_api.GetEngineInfoResponse
	4,  // 19: engine_api.EngineService.CreateEnclave:output_type -> engine_api.CreateEnclaveResponse
	8,  // 20: engine_api.EngineService.GetEnclaves:output_type -> engine_api.GetEnclavesResponse
	20, // 21: engine_api.EngineService.StopEnclave:output_type -> google.protobuf.Empty
	20, // 22: engine_api.EngineService.DestroyEnclave:output_type -> google.protobuf.Empty
	12, // 23: engine_api.EngineService.Clean:output_type -> engine_api.CleanResponse
	14, // 24: engine_api.EngineService.GetUserServiceLogs:output_type -> engine_api.GetUserServiceLogsResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_engine_service_proto_init() }
func file_engine_service_proto_init() {
	if File_engine_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_engine_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEngineInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnclaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveAPIContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveAPIContainerHostMachineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnclaveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnclavesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserServiceLogsArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserServiceLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_engine_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_engine_service_proto_goTypes,
		DependencyIndexes: file_engine_service_proto_depIdxs,
		EnumInfos:         file_engine_service_proto_enumTypes,
		MessageInfos:      file_engine_service_proto_msgTypes,
	}.Build()
	File_engine_service_proto = out.File
	file_engine_service_proto_rawDesc = nil
	file_engine_service_proto_goTypes = nil
	file_engine_service_proto_depIdxs = nil
}
